@using StockPortfolio.Models; 
@using StockPortfolio.Services; 
@using System.Timers;

<style>
    :root {
        --input-marging: 1.5rem;
    }

    .search-dropdown {
        position: absolute;
        top: auto;
        left: 0;
        right: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        width: 33%;
        z-index: 99;
        margin: calc(-1 * var(--input-marging)) auto 0; @* -var doesnt work... *@
        background-color: #fff;
        border: 2px solid black;
        border-top: 0;
    }

    input {
        border-width: 0.25rem;
        border-radius: 0.25rem;
        border-color: #93C5FD; @* blue-300 *@
        width: 33%;
        margin: var(--input-marging);
        padding: 1.5rem;
        height: 2.5rem;
    }

    button {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        padding: 1.5rem;
    }

    input:focus {
        outline: none;
        border-color: #3B82F6; @* blue-500 *@
    }

    button:focus{
        outline: none; @* to remove that annoying black border on click *@
    }
</style>

<div class="text-center">
    <input class="placeholder-blue-200"
           placeholder="Search by company name"
           @bind-value="searchText"
           @bind-value:event="oninput"
           @onfocusout="@HandleInputFieldFocusOut"
           @onkeyup="@OnKeyUp"
           @onfocusin="@OnKeyUp"/> @* we wanna reset timer on focus so dropdown list has been showed if user didnt type anything but clicked on search field *@

    @if (PossibleStocks != null)
    {
        <div class="search-dropdown"
             @onmouseover="@RegisterCursorInsideDropdownList"
             @onmouseout="@RegisterCursorOutsideDropdownList"
             @onfocusout="@HandleInputFieldFocusOut"> 

            @foreach (var stock in PossibleStocks)
            {
                <button class="text-xl text-light-primary-300 font-ubuntu hover:bg-blue-100"
                        @onclick="@(() => SelectStock(stock))">
                    <h1 class="font-bold">@stock.Symbol</h1>
                    <p class="hidden md:block">@stock.Name</p>
                    <p class="hidden 2xl:block">@stock.Industry</p>
                </button>
            }
            @if (PossibleStocks.Count == 0)
            {
                <p @onclick="@CloseDropdownList">No stocks found</p>
            }
        </div>
    }
</div>

@code{
    [Inject] private StocksRepository StocksRepo { get; set; }
    [Parameter] public Stock SelectedStock { get; set; }
    [Parameter] public EventCallback<Stock> SelectedStockChanged { get; set; }
    private List<Stock> PossibleStocks { get; set; }
    private string searchText;
    private string searchTextDelayed;
    private Timer delayTimer;
    private const int TIMER_DELAY = 300;
    private bool isCursorInsideDropdown = false;

    protected override void OnInitialized()
    {
        delayTimer = new Timer(TIMER_DELAY);
        delayTimer.Elapsed += OnUserStopTyping; //no need to unsubscribe because delayTimer wont overlive searchcomponent (they will dispose together)
        delayTimer.AutoReset = false;
    }

    private void OnKeyUp()
    {
        delayTimer.Stop();
        delayTimer.Start();
    }

    private void HandleInputFieldFocusOut()
    {
        if (!isCursorInsideDropdown) CloseDropdownList();
    }

    private void RegisterCursorInsideDropdownList()
    {
        isCursorInsideDropdown = true;
    }

    private void RegisterCursorOutsideDropdownList()
    {
        isCursorInsideDropdown = false;
    }

    private void SelectStock(Stock selectedStock)
    {
        SelectedStock = selectedStock;
        SelectedStockChanged.InvokeAsync(selectedStock);
        CloseDropdownList();
    }

    private void CloseDropdownList()
    {
        PossibleStocks = null;
        isCursorInsideDropdown = false;
    }

    private void GetPossibleStocks()
    {
        if (searchTextDelayed is null) searchTextDelayed = "A";
        PossibleStocks = StocksRepo.GetAll().Where(s => s.Name.StartsWith(searchTextDelayed, StringComparison.OrdinalIgnoreCase)).ToList().Take(3).ToList();
    }

    private void OnUserStopTyping(Object source, ElapsedEventArgs e)
    {
        /*
        need to wrap it into InvokeAsync Timer.Elapsed is a non-ui event(thread-safety)
        */
        InvokeAsync(() =>
        {
            searchTextDelayed = searchText;
            GetPossibleStocks();
            StateHasChanged();
        });
    }
}
